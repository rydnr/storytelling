# vim: set fileencoding=utf-8
"""
rydnr/storytelling/application/storytelling.py

This file defines the Storytelling class.

Copyright (C) 2025-today rydnr's https://github.com/rydnr/storytelling

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import asyncio
from pythoneda.shared.application import PythonEDA, enable
from rydnr.storytelling.infrastructure.cli import (
    GraphicNovelRequestedCli,
)
from rydnr.storytelling.infrastructure.openai import OpenAIPainter
from rydnr.storytelling.infrastructure.story.cli import StartFileStoryHttpServerCli
from rydnr.storytelling.infrastructure.story.http import FileStoryHttpServer


@enable(GraphicNovelRequestedCli)
@enable(StripRequestedCli)
@enable(PromptServerStartRequestedCli)
# @enable(OpenAIPainter)
@enable(StartFileStoryHttpServerCli)
@enable(FileStoryHttpServer)
class Storytelling(PythonEDA):
    """
    Runs the Storytelling PythonEDA app.

    Class name: Storytelling

    Responsibilities:
        - Runs the application.

    Collaborators:
        - Command-line handlers from rydnr.storytelling.infrastructure.cli
    """

    def __init__(self, name: str):
        """
        Creates a new Storytelling instance.
        :param name: The name of the application.
        :type name: str
        """
        # storytelling_banner is automatically generated by
        # rydnr/storytelling's flake.
        try:
            from rydnr.storytelling.application.storytelling_banner import (
                StorytellingBanner,
            )

            banner = StorytellingBanner()
        except ImportError:
            banner = None

        super().__init__(name, banner, __file__)


if __name__ == "__main__":
    asyncio.run(Storytelling.main("rydnr.storytelling.application.Storytelling"))

# vim: syntax=python ts=4 sw=4 sts=4 tw=79 sr et
# Local Variables:
# mode: python
# python-indent-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# fill-column: 79
# End:
